version: '3.7'
services:
  web:
    container_name: geolocation_api
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      postgresdb:
        condition: service_healthy
        restart: true
    volumes:
      - ./application/:/opt/app
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      PORT: 3000
    healthcheck:
      test: curl --fail geolocation_api:3000/health || exit 1
      interval: 5s
      retries: 10
      start_period: 30s
      timeout: 10s
    networks:
      - backend-network
  postgres-gui:
    image: dpage/pgadmin4:8.2
    container_name: postgres-gui
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    ports:
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgresdb:
        condition: service_healthy
        restart: true
    networks:
      - backend-network
  postgresdb:
    container_name: postgresdb
    image: postgres:16.1
    restart: always
    ports:
      - ${POSTGRES_PORT}
    volumes:
      - .postgresdb-data:/var/lib/postgresql/data
    networks:
      - backend-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s

networks:
  backend-network:
    name: backend-network
    driver: bridge

volumes:
  pgadmin_data:
